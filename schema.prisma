generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Route {
    id              String            @id @default(cuid())
    title           String
    setDate         DateTime          @default(now())
    color           String // Set a default color value
    grade           String
    communityGrades CommunityGrade[]
    images          RouteImage[]
    type            String
    score           Int               @default(0) // New score field with a default value of 0
    isArchive       Boolean           @default(false)
    completions     RouteCompletion[] // One-to-many relationship with RouteCompletion
    attempts        RouteAttempt[] // One-to-many relationship with RouteAttempt
    location        String            @default("Boulder1")
    stars           RouteStar[]
}

model RouteImage {
    id        String   @id @default(cuid())
    url       String // URL of the image
    route     Route    @relation(fields: [routeId], references: [id])
    routeId   String
    createdAt DateTime @default(now())
}

model CommunityGrade {
    id        Int      @id @default(autoincrement())
    grade     String // The grade assigned by the user
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
    routeId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, routeId]) // Ensure only one grade per user per route
}

model User {
    id              String            @id @default(cuid())
    name            String?
    email           String            @unique
    emailVerified   DateTime?
    image           String?
    password        String?
    completions     RouteCompletion[] // One-to-many relationship with RouteCompletion
    attempts        RouteAttempt[] // One-to-many relationship with RouteAttempt
    communityGrades CommunityGrade[]
    stars           RouteStar[]
    score           Int               @default(0)
    badges          Badge[]
    admin           Boolean           @default(false)
    routeSetter     Boolean           @default(false)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    Account         Account[]
    Session         Session[]
    private         Boolean           @default(false)
    mixerClimber    MixerClimber[]
}

model Badge {
    id    Int    @id @default(autoincrement())
    name  String
    users User[]
}

model RouteCompletion {
    id             Int      @id @default(autoincrement())
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    route          Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
    routeId        String
    sends          Int      @default(1)
    completionDate DateTime @default(now())

    @@unique([userId, routeId])
}

model RouteStar {
    id       Int      @id @default(autoincrement())
    user     User     @relation(fields: [userId], references: [id])
    userId   String
    route    Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
    routeId  String
    stars    Int
    comment  String?
    starDate DateTime @default(now())

    @@unique([userId, routeId])
}

model RouteAttempt {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    route       Route    @relation(fields: [routeId], references: [id])
    routeId     String
    attemptDate DateTime @default(now())
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// mixer competition 
// Enum to denote whether a climberâ€™s entry was via the app or manually entered.
enum EntryMethod {
    APP
    MANUAL
}

model MixerCompetition {
    id                 String              @id @default(cuid())
    name               String
    year               Int
    status             String              @default("inactive") // inactive, upcoming, In Progress, completed
    imageUrl           String?
    time               Int                 @default(180)
    compDay            DateTime?
    mixerRoutes        MixerRoute[]
    boulder            MixerBoulder[]
    climbers           MixerClimber[]
    divisions          MixerDivision[]
    boulderScores      MixerBoulderScore[]
    ropeScores         MixerRopeScore[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    areScoresAvailable Boolean             @default(false)
}

model MixerRoute {
    id            String           @id @default(cuid())
    name          String
    color         String
    holds         Json // Store hold data as JSON (Array of { holdNumber, topRopePoints, leadPoints })
    competitionId String
    competition   MixerCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

model MixerBoulder {
    id            String           @id @default(cuid())
    points        Int
    color         String
    competitionId String
    competition   MixerCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

model MixerClimber {
    id            String             @id @default(cuid())
    name          String             @unique
    divisionId    String?
    division      MixerDivision?     @relation(fields: [divisionId], references: [id], onDelete: SetNull)
    boulderScore  MixerBoulderScore?
    ropeScore     MixerRopeScore?
    competitionId String
    competition   MixerCompetition   @relation(fields: [competitionId], references: [id], onDelete: Cascade)

    registeredAt DateTime    @default(now()) // signup time
    checkedIn    Boolean     @default(false) // set to true on comp day if participant shows up
    entryMethod  EntryMethod @default(MANUAL) // APP if linked to a user account

    // Optional relation to an existing User. If not linked, entry is considered manual.
    userId    String?
    user      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MixerDivision {
    id            String           @id @default(cuid())
    name          String
    climbers      MixerClimber[]
    competitionId String
    level         String?
    competition   MixerCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

model MixerBoulderScore {
    id            String           @id @default(cuid())
    climberId     String           @unique
    climber       MixerClimber     @relation(fields: [climberId], references: [id], onDelete: Cascade)
    score         Int
    attempts      Int
    competitionId String
    competition   MixerCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

model MixerRopeScore {
    id            String           @id @default(cuid())
    climberId     String           @unique
    climber       MixerClimber     @relation(fields: [climberId], references: [id], onDelete: Cascade)
    score         Int
    attempts      Int
    competitionId String
    competition   MixerCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}
